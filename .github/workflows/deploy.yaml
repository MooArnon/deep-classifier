name: Build, Test, and Deploy to AWS ECR (ARM64)

on:
  push:
    branches:
      - main  # Runs only when pushing to 'main' branch
  workflow_dispatch:  # Allows manual execution

jobs:
  test-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image for Testing (ARM64)
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 --no-cache -t test-python-image .

      - name: Test Python Version Inside Container
        run: |
          docker run --rm --platform linux/arm64 --entrypoint python test-python-image --version

  deploy:
    needs: test-build  # Ensures testing passes before deployment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (IAM Keys)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Get Latest Image Tag
        id: get-latest-tag
        run: |
          latest_tag=$(aws ecr describe-images --repository-name space-time/deep-classifier \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text --region ap-southeast-1 2>/dev/null || echo "0")
          
          if [[ $latest_tag =~ ^[0-9]+$ ]]; then
            new_tag=$(($latest_tag + 1))
          else
            new_tag=1
          fi

          echo "New Image Tag: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Build and Push Docker Image for ARM64
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            --tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/space-time/deep-classifier:$new_tag \
            --push .

      - name: Make deploy.sh Executable
        run: chmod +x deploy.sh

      - name: Run Deploy Script
        run: ./deploy.sh
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          REGION: "ap-southeast-1"

      - name: Deploy Image to Lambda
        run: |
          echo "Waiting for ECR image to be fully available..."
          sleep 30

          echo "Updating Lambda function to use the new image..."
          aws lambda update-function-code \
              --function-name predict--btc \
              --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/space-time/deep-classifier:$new_tag \
              --region ap-southeast-1

          echo "Forcing redeployment of Lambda..."
          aws lambda update-function-configuration \
              --function-name predict--btc \
              --environment "Variables={ASSET=btc,FORCE_UPDATE=$(date +%s)}" \
              --region ap-southeast-1

          echo "âœ… Lambda function successfully updated!"
